// <auto-generated />
using System;
using IdentityServer.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityServer.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Service.Core.Models.Identities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLockUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManageDomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentEndpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DomainAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DomainComponents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchoolAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SchoolLogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolLogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DomainAdminId")
                        .IsUnique()
                        .HasFilter("[DomainAdminId] IS NOT NULL");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.DomainComponent", b =>
                {
                    b.Property<Guid>("DomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DomainId", "ComponentId");

                    b.HasIndex("ComponentId");

                    b.ToTable("DomainComponents");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.DomainProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("SenderId");

                    b.ToTable("DomainProcess");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.ProviderAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ProviderAuths");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Account", b =>
                {
                    b.HasOne("Service.Core.Models.Identities.Domain", "Domain")
                        .WithMany("Accounts")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Core.Models.Identities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Domain", b =>
                {
                    b.HasOne("Service.Core.Models.Identities.Account", "DomainAdmin")
                        .WithOne("ManageDomain")
                        .HasForeignKey("Service.Core.Models.Identities.Domain", "DomainAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DomainAdmin");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.DomainComponent", b =>
                {
                    b.HasOne("Service.Core.Models.Identities.Component", "Component")
                        .WithMany("Domains")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Core.Models.Identities.Domain", "Domain")
                        .WithMany("Components")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.DomainProcess", b =>
                {
                    b.HasOne("Service.Core.Models.Identities.Domain", "Domain")
                        .WithMany("Processes")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Core.Models.Identities.Account", "Sender")
                        .WithMany("SentEmails")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.ProviderAuth", b =>
                {
                    b.HasOne("Service.Core.Models.Identities.Account", "Account")
                        .WithMany("ProvidersAuth")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Account", b =>
                {
                    b.Navigation("ManageDomain");

                    b.Navigation("ProvidersAuth");

                    b.Navigation("SentEmails");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Component", b =>
                {
                    b.Navigation("Domains");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Domain", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Components");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("Service.Core.Models.Identities.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
